{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/jacqueline/Documents/NLW4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // useEffect é um hook de efeitos colaterais: quando algo acontecer é disparada alguma função \n\nimport styles from '../../styles/components/Countdown.module.css';\nvar countdownTimeout; // tipagem global da variável para definir qual o formato dela\n\nfunction Countdown() {\n  _s();\n\n  var _useState = useState(0.1 * 60),\n      time = _useState[0],\n      setTime = _useState[1]; // tempo inicial do countdown em segundos\n\n\n  var _useState2 = useState(),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1]; // armazena a informação de quando o countdown está acontecendo/ativo\n\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1]; // inicia como false porque essa condição será setado depois \n\n\n  var minutes = Math.floor(time / 60); // arredondando pra baixo, desconsiderando segundos restantes\n\n  var seconds = time % 60; // resto da divisão pra considerar os segundos restantes  \n  // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  function startCountdown() {\n    setIsActive(true); // no começo precisa ativar o countdown, então ao clicar no botão será setado o valor\n  } // a função tem o objetivo de suspender, então partir desse momento vai parar de executar\n\n\n  function resetCountdown() {\n    // porém quando parar o countdown, a função abaixo já terá executado - 1, nesse caso incluir a variável countdownTimeout pra tratar esse detalhe    \n    clearTimeout(countdownTimeout); // quando resetar o countdown, dar um clear passando a variável countdownTimeout cancelando assim sua execução\n\n    setIsActive(false); // parando de executar\n\n    setTime(25 * 60); // quando for parado o countdown, o setTime deve ser atualizado e o time deve voltar para seu estado inicial\n  } // 1º parâmetro: função do que quero executar, 2º parâmetro: quando quero executar\n  // nesse caso executar a função startCountDown sempre que o valor de active mudar\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      // se estou com countdown ativo e time for maior que 0\n      countdownTimeout = setTimeout(function () {\n        // a variável irá armazenar a função nativa setTimeout dispara outra função aqui uma arrow function, no tempo que for definido, nesse caso, 1 segundo\n        setTime(time - 1); // essa arrow function tira 1 segundo do time e atualiza o setTime \n      }, 1000);\n    } else if (isActive && time === 0) {\n      // verificando se o countdown chegou até o final\n      setHasFinished(true); // aqui o estado setHasFinished será atualizado\n\n      setIsActive(false); // e o contdown não estará mais ativo\n    }\n  }, [isActive, time]); // além de xecutar toda essa função quando o active mudar, executar também quando o time muda (a cada 1 segundo a função é disparada)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), hasFinished ?\n    /*#__PURE__*/\n    // caso tenha terminado, se, então ...\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: true,\n        className: styles.countdownButton,\n        children: \"Ciclo encerrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n    _jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n          onClick: resetCountdown,\n          children: \"Abandonar o ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: styles.countdownButton,\n          onClick: startCountdown,\n          children: \"Iniciar um ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Countdown, \"k2T0UNkcxC/O3MqU46YK+e+Barw=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx"],"names":["useState","useEffect","styles","countdownTimeout","Countdown","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","startCountdown","resetCountdown","clearTimeout","setTimeout","countdownContainer","countdownButton","countdownButtonActive"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'; // useEffect é um hook de efeitos colaterais: quando algo acontecer é disparada alguma função \nimport styles from '../../styles/components/Countdown.module.css';\n\n\nlet countdownTimeout: NodeJS.Timeout;  // tipagem global da variável para definir qual o formato dela\n\nfunction Countdown() {\n\n  const [time, setTime] = useState(0.1 * 60); // tempo inicial do countdown em segundos\n\n  const [isActive, setIsActive] = useState(); // armazena a informação de quando o countdown está acontecendo/ativo\n\n  const [hasFinished, setHasFinished] = useState(false); // inicia como false porque essa condição será setado depois \n\n  const minutes = Math.floor(time / 60); // arredondando pra baixo, desconsiderando segundos restantes\n  const seconds = time % 60; // resto da divisão pra considerar os segundos restantes  \n  // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  \n\n  function startCountdown() {\n    setIsActive(true); // no começo precisa ativar o countdown, então ao clicar no botão será setado o valor\n  }\n\n  // a função tem o objetivo de suspender, então partir desse momento vai parar de executar\n  function resetCountdown() { // porém quando parar o countdown, a função abaixo já terá executado - 1, nesse caso incluir a variável countdownTimeout pra tratar esse detalhe    \n    clearTimeout(countdownTimeout) // quando resetar o countdown, dar um clear passando a variável countdownTimeout cancelando assim sua execução\n    setIsActive(false); // parando de executar\n    setTime(25 * 60) // quando for parado o countdown, o setTime deve ser atualizado e o time deve voltar para seu estado inicial\n  } \n\n  // 1º parâmetro: função do que quero executar, 2º parâmetro: quando quero executar\n  // nesse caso executar a função startCountDown sempre que o valor de active mudar\n  useEffect( () => {\n    if (isActive && time > 0) { // se estou com countdown ativo e time for maior que 0\n      countdownTimeout = setTimeout(() => { // a variável irá armazenar a função nativa setTimeout dispara outra função aqui uma arrow function, no tempo que for definido, nesse caso, 1 segundo\n        setTime(time - 1); // essa arrow function tira 1 segundo do time e atualiza o setTime \n      }, 1000)\n    }  else if (isActive && time === 0) { // verificando se o countdown chegou até o final\n      setHasFinished(true); // aqui o estado setHasFinished será atualizado\n      setIsActive(false); // e o contdown não estará mais ativo\n    }\n  }, [isActive, time]) // além de xecutar toda essa função quando o active mudar, executar também quando o time muda (a cada 1 segundo a função é disparada)\n  \n  \n\n  return (\n    <div>\n\n      <div className={styles.countdownContainer}>      \n      \n        <div>\n          <span>{ minuteLeft }</span>\n          <span>{ minuteRight }</span>\n        </div>\n\n        <span>:</span>\n\n        <div>\n          <span>{ secondLeft }</span>\n          <span>{ secondRight }</span>\n        </div>\n      </div>\n\n      {/* já temos uma função que verifica se está ativo, então, enquanto o countdown estiver ativo mostrar o botão de outra forma */}\n      {/* if ternário */}\n\n      {hasFinished ? ( // caso tenha terminado, se, então ...\n        <div>\n          <button\n            disabled            \n            className={styles.countdownButton} >\n            Ciclo encerrado\n          </button>\n        </div>\n\n      ) : ( // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n      <>\n        { isActive ? (\n        <div>\n          <button \n            type=\"button\" \n            className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\n            onClick={ resetCountdown } >\n            Abandonar o ciclo\n          </button>\n        </div>\n        ) : (\n        <div>\n          <button \n            type=\"button\" \n            className={styles.countdownButton}\n            onClick={ startCountdown } >\n            Iniciar um ciclo\n          </button>\n        </div>\n        )}\n      </>    \n      )}\n    </div>\n  );\n}\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}