{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nexport var ChallengesContext = /*#__PURE__*/createContext({}); // declarando o tipo do contexto, já definido acima\n\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1]; // o nível inicia em 1\n\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1]; // a experiência do usuário inicia em 0\n\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1]; // desafios completados que inicia em 0\n\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    console.log('New challenge');\n  }\n\n  return (\n    /*#__PURE__*/\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        // propriedade value é o que será enviado de informação\n        level: level,\n        currentExperience: currentExperience,\n        challengesCompleted: challengesCompleted,\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge // disparar um novo desafio quando counttdown chegar a 0\n\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(ChallengesProvider, \"lIgE7IFKF0067ZYEERnSVPjxmqw=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","levelUp","startNewChallenge","console","log"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAcA,OAAO,IAAMC,iBAAiB,gBAAGF,aAAa,CAAC,EAAD,CAAvC,C,CAAsE;;AAG7E,OAAO,SAASG,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAE;AAAF,kBAE9CH,QAAQ,CAAC,CAAD,CAFsC;AAAA,MAEjEI,KAFiE;AAAA,MAE1DC,QAF0D,iBAEjC;;;AAFiC,mBAGtBL,QAAQ,CAAC,CAAD,CAHc;AAAA,MAGjEM,iBAHiE;AAAA,MAG9CC,oBAH8C,kBAGT;;;AAHS,mBAIlBP,QAAQ,CAAC,CAAD,CAJU;AAAA,MAIjEQ,mBAJiE;AAAA,MAI5CC,sBAJ4C,kBAIL;;;AAGnE,WAASC,OAAT,GAAmB;AACjBL,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASO,iBAAT,GAA6B;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAED;AAAA;AACE;AACA,YAAC,iBAAD,CAAmB,QAAnB;AACA,MAAA,KAAK,EAAE;AAAE;AACPT,QAAAA,KAAK,EAALA,KADK;AAELE,QAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,QAAAA,mBAAmB,EAAnBA,mBAHK;AAILE,QAAAA,OAAO,EAAPA,OAJK;AAKLC,QAAAA,iBAAiB,EAAjBA,iBALK,CAKa;;AALb,OADP;AAAA,gBAQIR;AARJ;AAAA;AAAA;AAAA;AAAA;AAFF;AAaD;;GA5BeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\n\ninterface ChallengesProviderProps { // o componente+Props recebe a propriedade children\n  children: ReactNode; // uma boa prática é fazer uma tipagem do children, onde o ReactNode aceita qualquer elemento filho\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number \n  challengesCompleted: number;\n  levelUp: () => void; // função que não tem retorno\n  startNewChallenge: () => void;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData); // declarando o tipo do contexto, já definido acima\n \n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) { // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  \n  const [level, setLevel] = useState(1); // o nível inicia em 1\n  const [currentExperience, setCurrentExperience] = useState(0); // a experiência do usuário inicia em 0\n  const [challengesCompleted, setChallengesCompleted] = useState(0); // desafios completados que inicia em 0\n\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    console.log('New challenge')\n  }\n\n  return (\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    <ChallengesContext.Provider     \n    value={{ // propriedade value é o que será enviado de informação\n      level, \n      currentExperience, \n      challengesCompleted, \n      levelUp,\n      startNewChallenge // disparar um novo desafio quando counttdown chegar a 0\n      }} >  \n      { children }\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}