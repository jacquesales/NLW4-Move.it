{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\n\nexport var ChallengesContext = /*#__PURE__*/createContext({}); // declarando o tipo do contexto, já definido acima\n\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1]; // o nível inicia em 1\n\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1]; // a experiência do usuário inicia em 0\n\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1]; // desafios completados que inicia em 0\n\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1]; // criando um estado pra armazenar o challenge aleatório que inicia vazio\n\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um nº aleatório/randômico entre 0 e o número final que nesse caso é o tamanho total dos desafios; arrendondando pra baixo com o floor\n\n    var challenge = challenges[randomChallengeIndex]; // variável challenge com um index aleatório e específico\n\n    setActiveChallenge(challenge);\n  }\n\n  return (\n    /*#__PURE__*/\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        // propriedade value é o que será enviado de informação\n        level: level,\n        currentExperience: currentExperience,\n        challengesCompleted: challengesCompleted,\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge // disparar um novo desafio quando counttdown chegar a 0\n\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB,C,CAAgD;;AAchD,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC,C,CAAsE;;AAG7E,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAE;AAAF,kBAE9CJ,QAAQ,CAAC,CAAD,CAFsC;AAAA,MAEjEK,KAFiE;AAAA,MAE1DC,QAF0D,iBAEjC;;;AAFiC,mBAGtBN,QAAQ,CAAC,CAAD,CAHc;AAAA,MAGjEO,iBAHiE;AAAA,MAG9CC,oBAH8C,kBAGT;;;AAHS,mBAIlBR,QAAQ,CAAC,CAAD,CAJU;AAAA,MAIjES,mBAJiE;AAAA,MAI5CC,sBAJ4C,kBAIL;;;AAJK,mBAK1BV,QAAQ,CAAC,IAAD,CALkB;AAAA,MAKjEW,eALiE;AAAA,MAKhDC,kBALgD,kBAKX;;;AAE7D,WAASC,OAAT,GAAmB;AACjBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA6B;AAC3B;AACA,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B,CAF2B,CAEiD;;AAC5E,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B,CAH2B,CAGyB;;AAEpDH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACD;;AAED;AAAA;AACE;AACA,YAAC,iBAAD,CAAmB,QAAnB;AACA,MAAA,KAAK,EAAE;AAAE;AACPf,QAAAA,KAAK,EAALA,KADK;AAELE,QAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,QAAAA,mBAAmB,EAAnBA,mBAHK;AAILI,QAAAA,OAAO,EAAPA,OAJK;AAKLC,QAAAA,iBAAiB,EAAjBA,iBALK,CAKa;;AALb,OADP;AAAA,gBAQIV;AARJ;AAAA;AAAA;AAAA;AAAA;AAFF;AAaD;;GAhCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\n\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\n\ninterface ChallengesProviderProps { // o componente+Props recebe a propriedade children\n  children: ReactNode; // uma boa prática é fazer uma tipagem do children, onde o ReactNode aceita qualquer elemento filho\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number \n  challengesCompleted: number;\n  levelUp: () => void; // função que não tem retorno\n  startNewChallenge: () => void;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData); // declarando o tipo do contexto, já definido acima\n \n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) { // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  \n  const [level, setLevel] = useState(1); // o nível inicia em 1\n  const [currentExperience, setCurrentExperience] = useState(0); // a experiência do usuário inicia em 0\n  const [challengesCompleted, setChallengesCompleted] = useState(0); // desafios completados que inicia em 0\n  const [activeChallenge, setActiveChallenge] = useState(null) // criando um estado pra armazenar o challenge aleatório que inicia vazio\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um nº aleatório/randômico entre 0 e o número final que nesse caso é o tamanho total dos desafios; arrendondando pra baixo com o floor\n    const challenge = challenges[randomChallengeIndex]; // variável challenge com um index aleatório e específico\n\n    setActiveChallenge(challenge);\n  }\n\n  return (\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    <ChallengesContext.Provider     \n    value={{ // propriedade value é o que será enviado de informação\n      level, \n      currentExperience, \n      challengesCompleted, \n      levelUp,\n      startNewChallenge // disparar um novo desafio quando counttdown chegar a 0\n      }} >  \n      { children }\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}