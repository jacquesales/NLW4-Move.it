{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx\";\nimport { useContext } from 'react';\nimport { CountdownContext } from '../../contexts/CountdownContext';\nimport styles from '../../styles/components/Countdown.module.css';\n\nfunction Countdown() {\n  const {\n    minutes,\n    seconds,\n    isActive,\n    hasFinished,\n    startCountdown,\n    resetCountdown\n  } = useContext(CountdownContext); // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  // não foi enviado ao contexto porque se refere apenas ao layout, da forma como o número deve se apresentar na página\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), hasFinished ?\n    /*#__PURE__*/\n    // caso tenha terminado, se, então ...\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: true,\n        className: styles.countdownButton,\n        children: \"Ciclo encerrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n    _jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `${styles.countdownButton} ${styles.countdownButtonActive}`,\n          onClick: resetCountdown,\n          children: \"Abandonar o ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: styles.countdownButton,\n          onClick: startCountdown,\n          children: \"Iniciar um ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx"],"names":["useContext","CountdownContext","styles","Countdown","minutes","seconds","isActive","hasFinished","startCountdown","resetCountdown","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,OAAOC,MAAP,MAAmB,8CAAnB;;AAGA,SAASC,SAAT,GAAqB;AAEnB,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA;AANI,MAOFT,UAAU,CAACC,gBAAD,CAPd,CAFmB,CAWnB;AACA;AACA;AACA;;AACA,QAAM,CAACS,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACR,OAAD,CAAN,CAAgBS,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACP,OAAD,CAAN,CAAgBQ,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AAGA,sBACE;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAEZ,MAAM,CAACe,kBAAvB;AAAA,8BAEE;AAAA,gCACE;AAAA,oBAAQP;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eASE;AAAA,gCACE;AAAA,oBAAQI;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAoBGT,WAAW;AAAA;AAAK;AACf;AAAA,6BACE;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,SAAS,EAAEL,MAAM,CAACgB,eAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADU;AAAA;AASN;AACN;AAAA,gBACIZ,QAAQ,gBACR;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAG,GAAEJ,MAAM,CAACgB,eAAgB,IAAGhB,MAAM,CAACiB,qBAAsB,EAFvE;AAGE,UAAA,OAAO,EAAGV,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,gBAUR;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAEP,MAAM,CAACgB,eAFpB;AAGE,UAAA,OAAO,EAAGV,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAXJ,qBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuDD;;AACD,eAAeL,SAAf","sourcesContent":["import { useContext } from 'react'; \nimport { CountdownContext } from '../../contexts/CountdownContext';\n\nimport styles from '../../styles/components/Countdown.module.css';\n\n\nfunction Countdown() {  \n\n  const {\n    minutes, \n    seconds, \n    isActive, \n    hasFinished, \n    startCountdown, \n    resetCountdown\n  } = useContext(CountdownContext);\n   \n  // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  // não foi enviado ao contexto porque se refere apenas ao layout, da forma como o número deve se apresentar na página\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  \n   \n  return (\n    <div>\n\n      <div className={styles.countdownContainer}>      \n      \n        <div>\n          <span>{ minuteLeft }</span>\n          <span>{ minuteRight }</span>\n        </div>\n\n        <span>:</span>\n\n        <div>\n          <span>{ secondLeft }</span>\n          <span>{ secondRight }</span>\n        </div>\n      </div>\n\n      {/* já temos uma função que verifica se está ativo, então, enquanto o countdown estiver ativo mostrar o botão de outra forma */}\n      {/* if ternário */}\n\n      {hasFinished ? ( // caso tenha terminado, se, então ...\n        <div>\n          <button\n            disabled            \n            className={styles.countdownButton} >\n            Ciclo encerrado\n          </button>\n        </div>\n\n      ) : ( // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n      <>\n        { isActive ? (\n          <div>\n            <button \n              type=\"button\" \n              className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\n              onClick={ resetCountdown } >\n              Abandonar o ciclo\n            </button>\n        </div>\n        ) : (\n          <div>\n            <button \n              type=\"button\" \n              className={styles.countdownButton}\n              onClick={ startCountdown } >\n              Iniciar um ciclo\n            </button>\n          </div>\n          )}\n        </>    \n      )}\n    </div>\n  );\n}\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}