{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx\";\nimport { useState, useEffect } from 'react'; // useEffect é um hook de efeitos colaterais: quando algo acontecer é disparada alguma função \n\nimport styles from '../../styles/components/Countdown.module.css';\n\nfunction Countdown() {\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60); // tempo inicial do countdown em segundos\n\n  const minutes = Math.floor(time / 60); // arredondando pra baixo, desconsiderando segundos restantes\n\n  const seconds = time % 60; // resto da divisão pra considerar os segundos restantes  \n\n  /* const minuteLeftRight = String(minutes).padStart(2, '0').split(''); */\n  // split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  const {\n    0: active,\n    1: setActive\n  } = useState(); // armazena se o countDown está acontecendo/ativo ou se está pausado\n\n  function startCountDown() {\n    setActive(true); // no começo precisa ativar o countDown, então ao clicar no botão será setado o valor\n  } // 1º parâmetro: função do que quero executar, 2º parâmetro: quando quero executar\n  // nesse caso executar a função startCountDown sempre que o valor de active mudar\n\n\n  useEffect(() => {\n    if (active && time > 0) {\n      // se estou com countDown ativo e time for maior que 0\n      setTimeout(() => {\n        // a função nativa setTimeout dispara outra função aqui uma arrow function, no tempo que for definido, nesse caso, 1 segundo\n        setTime(time - 1); // essa arrow function tira 1 segundo do time e atualiza o setTime \n      }, 1000);\n    }\n  }, [active]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton,\n        onClick: startCountDown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Countdown;","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx"],"names":["useState","useEffect","styles","Countdown","time","setTime","minutes","Math","floor","seconds","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","active","setActive","startCountDown","setTimeout","countdownContainer","countdownButton"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA6C;;AAC7C,OAAOC,MAAP,MAAmB,8CAAnB;;AAEA,SAASC,SAAT,GAAqB;AAEnB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBL,QAAQ,CAAC,KAAK,EAAN,CAAhC,CAFmB,CAEwB;;AAC3C,QAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAI,GAAG,EAAlB,CAAhB,CAHmB,CAGoB;;AACvC,QAAMK,OAAO,GAAGL,IAAI,GAAG,EAAvB,CAJmB,CAIQ;;AAC3B;AAA0E;AAC1E;AACA;;AACA,QAAM,CAACM,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,OAAD,CAAN,CAAgBI,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAAlC;AAEA,QAAM;AAAA,OAACG,MAAD;AAAA,OAASC;AAAT,MAAsBlB,QAAQ,EAApC,CAXmB,CAWqB;;AAExC,WAASmB,cAAT,GAA0B;AACxBD,IAAAA,SAAS,CAAC,IAAD,CAAT,CADwB,CACP;AAClB,GAfkB,CAiBnB;AACA;;;AACAjB,EAAAA,SAAS,CAAE,MAAM;AACf,QAAIgB,MAAM,IAAIb,IAAI,GAAG,CAArB,EAAwB;AAAE;AACxBgB,MAAAA,UAAU,CAAC,MAAM;AAAE;AACjBf,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP,CADe,CACI;AACpB,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACa,MAAD,CANM,CAAT;AASA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEf,MAAM,CAACmB,kBAAvB;AAAA,8BAEE;AAAA,gCACE;AAAA,oBAAQX;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eASE;AAAA,gCACE;AAAA,oBAAQI;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AAAA,6BACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAEd,MAAM,CAACoB,eAAxC;AACA,QAAA,OAAO,EAAGH,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;AACD,eAAehB,SAAf","sourcesContent":["import { useState, useEffect } from 'react'; // useEffect é um hook de efeitos colaterais: quando algo acontecer é disparada alguma função \nimport styles from '../../styles/components/Countdown.module.css';\n\nfunction Countdown() {\n\n  const [time, setTime] = useState(25 * 60); // tempo inicial do countdown em segundos\n  const minutes = Math.floor(time / 60); // arredondando pra baixo, desconsiderando segundos restantes\n  const seconds = time % 60; // resto da divisão pra considerar os segundos restantes  \n  /* const minuteLeftRight = String(minutes).padStart(2, '0').split(''); */ // split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n\n  const [active, setActive] = useState(); // armazena se o countDown está acontecendo/ativo ou se está pausado\n\n  function startCountDown() {\n    setActive(true); // no começo precisa ativar o countDown, então ao clicar no botão será setado o valor\n  }\n\n  // 1º parâmetro: função do que quero executar, 2º parâmetro: quando quero executar\n  // nesse caso executar a função startCountDown sempre que o valor de active mudar\n  useEffect( () => {\n    if (active && time > 0) { // se estou com countDown ativo e time for maior que 0\n      setTimeout(() => { // a função nativa setTimeout dispara outra função aqui uma arrow function, no tempo que for definido, nesse caso, 1 segundo\n        setTime(time - 1); // essa arrow function tira 1 segundo do time e atualiza o setTime \n      }, 1000)\n    }  \n  }, [active]) \n  \n\n  return (\n    <div>\n      <div className={styles.countdownContainer}>      \n      \n        <div>\n          <span>{ minuteLeft }</span>\n          <span>{ minuteRight }</span>\n        </div>\n\n        <span>:</span>\n\n        <div>\n          <span>{ secondLeft }</span>\n          <span>{ secondRight }</span>\n        </div>\n      </div>\n\n      <div>\n        <button type=\"button\" className={styles.countdownButton}\n        onClick={ startCountDown } >\n          Iniciar um ciclo\n        </button>\n      </div>\n    </div>\n  )\n}\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}