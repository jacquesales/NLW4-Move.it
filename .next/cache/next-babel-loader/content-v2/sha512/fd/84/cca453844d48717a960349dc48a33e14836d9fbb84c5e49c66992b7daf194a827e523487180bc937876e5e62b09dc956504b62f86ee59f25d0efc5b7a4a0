{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/jacqueline/Documents/NLW4/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/home/jacqueline/Documents/NLW4/moveit-next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { CountdownProvider } from '../../contexts/CountdownContext';\nimport styles from '../../styles/components/Countdown.module.css';\n\nfunction Countdown() {\n  _s();\n\n  var _useContext = useContext(CountdownProvider);\n\n  _objectDestructuringEmpty(_useContext); // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  // não foi enviado ao contexto porque se refere apenas ao layout, da forma como o número deve se apresentar na página\n\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), hasFinished ?\n    /*#__PURE__*/\n    // caso tenha terminado, se, então ...\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: true,\n        className: styles.countdownButton,\n        children: \"Ciclo encerrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n    _jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive),\n          onClick: resetCountdown,\n          children: \"Abandonar o ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: styles.countdownButton,\n          onClick: startCountdown,\n          children: \"Iniciar um ciclo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Countdown, \"GEVSeSrD72hjJ3fa3BFTxaVyljk=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/components/Countdown/Countdown.tsx"],"names":["useContext","CountdownProvider","styles","Countdown","String","minutes","padStart","split","minuteLeft","minuteRight","seconds","secondLeft","secondRight","countdownContainer","hasFinished","countdownButton","isActive","countdownButtonActive","resetCountdown","startCountdown"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AAEA,OAAOC,MAAP,MAAmB,8CAAnB;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AAAA,oBAERH,UAAU,CAACC,iBAAD,CAFF;;AAAA,0CAInB;AACA;AACA;AACA;;;AAPmB,8BAQeG,MAAM,CAACC,OAAD,CAAN,CAAgBC,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CARf;AAAA;AAAA,MAQZC,UARY;AAAA,MAQAC,WARA;;AAAA,+BASeL,MAAM,CAACM,OAAD,CAAN,CAAgBJ,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CATf;AAAA;AAAA,MASZI,UATY;AAAA,MASAC,WATA;;AAYnB,sBACE;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAEV,MAAM,CAACW,kBAAvB;AAAA,8BAEE;AAAA,gCACE;AAAA,oBAAQL;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eASE;AAAA,gCACE;AAAA,oBAAQE;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAQC;AAAR;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAoBGE,WAAW;AAAA;AAAK;AACf;AAAA,6BACE;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,SAAS,EAAEZ,MAAM,CAACa,eAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADU;AAAA;AASN;AACN;AAAA,gBACIC,QAAQ,gBACR;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,YAAKd,MAAM,CAACa,eAAZ,cAA+Bb,MAAM,CAACe,qBAAtC,CAFX;AAGE,UAAA,OAAO,EAAGC,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADQ,gBAUR;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,SAAS,EAAEhB,MAAM,CAACa,eAFpB;AAGE,UAAA,OAAO,EAAGI,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAXJ,qBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuDD;;GAnEQhB,S;;KAAAA,S;AAoET,eAAeA,SAAf","sourcesContent":["import { useContext } from 'react'; \nimport { CountdownProvider } from '../../contexts/CountdownContext';\n\nimport styles from '../../styles/components/Countdown.module.css';\n\n\nfunction Countdown() {  \n\n  const {} = useContext(CountdownProvider);\n   \n  // const minuteLeftRight = String(minutes).padStart(2, '0').split(''); split separa  s t r i n g s\n  // transformando o nº em string, no caso de apenas um caracter (ex. 5 minutos) o padStart verifica se não tiver 2 carasteres ele preenche o restante pra esquerda (ex. 05 minutos)\n  // como o split devolve a separação em um array (com posições) podemos desestruturá-lo para trabalhar com cada posição\n  // não foi enviado ao contexto porque se refere apenas ao layout, da forma como o número deve se apresentar na página\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n  \n   \n  return (\n    <div>\n\n      <div className={styles.countdownContainer}>      \n      \n        <div>\n          <span>{ minuteLeft }</span>\n          <span>{ minuteRight }</span>\n        </div>\n\n        <span>:</span>\n\n        <div>\n          <span>{ secondLeft }</span>\n          <span>{ secondRight }</span>\n        </div>\n      </div>\n\n      {/* já temos uma função que verifica se está ativo, então, enquanto o countdown estiver ativo mostrar o botão de outra forma */}\n      {/* if ternário */}\n\n      {hasFinished ? ( // caso tenha terminado, se, então ...\n        <div>\n          <button\n            disabled            \n            className={styles.countdownButton} >\n            Ciclo encerrado\n          </button>\n        </div>\n\n      ) : ( // os botões abaixo só devem ser executados quando o ciclo não tiver sido encerrado      \n      <>\n        { isActive ? (\n          <div>\n            <button \n              type=\"button\" \n              className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\n              onClick={ resetCountdown } >\n              Abandonar o ciclo\n            </button>\n        </div>\n        ) : (\n          <div>\n            <button \n              type=\"button\" \n              className={styles.countdownButton}\n              onClick={ startCountdown } >\n              Iniciar um ciclo\n            </button>\n          </div>\n          )}\n        </>    \n      )}\n    </div>\n  );\n}\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}