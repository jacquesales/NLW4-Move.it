{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/components/ExperienceBar/ExperienceBar.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { ChallengesContext } from '../../contexts/ChallengesContext';\nimport styles from '../../styles/components/ExperienceBar.module.css';\n\nfunction ExperienceBar() {\n  _s();\n\n  var _useContext = useContext(ChallengesContext),\n      currentExperience = _useContext.currentExperience,\n      experienceToNextLevel = _useContext.experienceToNextLevel; // utilizando os contextos de experiência do usuário (qual a experiência atual e quanto falta pra alcançar o próx level) \n\n\n  var percentToNextLevel = Math.round(currentExperience * 100) / experienceToNextLevel; // calculando o progresso da barra de experiência\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: styles.experienceBar,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"0 xp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"\".concat(percentToNextLevel, \"%\")\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.currentExperience,\n        style: {\n          left: \"\".concat(percentToNextLevel, \"%\")\n        },\n        children: [currentExperience, \" px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [experienceToNextLevel, \" xp\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExperienceBar, \"vJz9w/yPxCuS+EIzmpz2qzto+DA=\");\n\n_c = ExperienceBar;\nexport default ExperienceBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExperienceBar\");","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/components/ExperienceBar/ExperienceBar.tsx"],"names":["useContext","ChallengesContext","styles","ExperienceBar","currentExperience","experienceToNextLevel","percentToNextLevel","Math","round","experienceBar","width","left"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AAEA,OAAOC,MAAP,MAAmB,kDAAnB;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AAAA,oBAC8BH,UAAU,CAACC,iBAAD,CADxC;AAAA,MACfG,iBADe,eACfA,iBADe;AAAA,MACIC,qBADJ,eACIA,qBADJ,EAC6D;;;AACpF,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWJ,iBAAiB,GAAG,GAA/B,IAAsCC,qBAAjE,CAFuB,CAEgE;;AACvF,sBAEE;AAAQ,IAAA,SAAS,EAAEH,MAAM,CAACO,aAA1B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAEE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,YAAMJ,kBAAN;AAAP;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF,oBAIE;AAAM,QAAA,SAAS,EAAEJ,MAAM,CAACE,iBAAxB;AAA2C,QAAA,KAAK,EAAE;AAAEO,UAAAA,IAAI,YAAML,kBAAN;AAAN,SAAlD;AAAA,mBACGF,iBADH;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAA,iBAAQC,qBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAgBD;;GAnBQF,a;;KAAAA,a;AAoBT,eAAeA,aAAf","sourcesContent":["import { useContext } from 'react';\nimport { ChallengesContext } from '../../contexts/ChallengesContext';\n\nimport styles from '../../styles/components/ExperienceBar.module.css';\n\nfunction ExperienceBar() {\n  const { currentExperience, experienceToNextLevel } = useContext(ChallengesContext); // utilizando os contextos de experiência do usuário (qual a experiência atual e quanto falta pra alcançar o próx level) \n  const percentToNextLevel = Math.round(currentExperience * 100) / experienceToNextLevel // calculando o progresso da barra de experiência\n  return (\n\n    <header className={styles.experienceBar} >\n      <span>0 xp</span>\n      <div>    \n\n        <div style={{ width: `${ percentToNextLevel }%` }} /> { /* estilo definido inline pois consigo controlá-lo como uma variável; no css é tudo estático */}\n        \n        <span className={styles.currentExperience} style={{ left: `${ percentToNextLevel }%` }}>\n          {currentExperience} px\n        </span>\n\n      </div>\n      <span>{ experienceToNextLevel } xp</span>\n    </header>\n  )\n}\nexport default ExperienceBar;"]},"metadata":{},"sourceType":"module"}