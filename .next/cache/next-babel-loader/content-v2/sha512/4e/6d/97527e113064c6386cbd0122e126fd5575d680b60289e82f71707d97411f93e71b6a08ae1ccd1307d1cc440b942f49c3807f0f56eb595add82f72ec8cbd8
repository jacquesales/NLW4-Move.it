{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\n\nexport const ChallengesContext = /*#__PURE__*/createContext({}); // declarando o tipo do contexto, já definido acima \n\nexport function ChallengesProvider({\n  children\n}) {\n  // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1); // o nível inicia em 1\n\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0); // a experiência do usuário inicia em 0\n\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0); // desafios completados que inicia em 0\n\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // criando um estado pra armazenar o challenge aleatório que inicia vazio\n  // calculando o quanto que usuário precisa de experiência pra avançar de level, baseado no level que está atualmente\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // cálculo de rpg baseado em raiz quadrada/potência - pow, na potência 2, de qual o próximo level vezes fator de experiência 4 (nível de dificuldade)\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um nº aleatório/randômico entre 0 e o número final que nesse caso é o tamanho total dos desafios; arrendondando pra baixo com o floor\n\n    const challenge = challenges[randomChallengeIndex]; // variável challenge com um index aleatório e específico\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    // função chamada quando o usuário clicar no botão Falhei\n    setActiveChallenge(null); // voltando ao activeChallenge para o valor inicial\n  }\n\n  function completeChallenge() {\n    // função que irá completar um desafio quando clicar no botão Completei; // não precisa de parâmetros pois já foram definidos no activeChallenge: qual o desafio, quanto de experência vale...\n    if (!activeChallenge) {\n      return; // return void, apenas para validação; essa função não pode ser chamada se usuario não estiver com desafio ativo\n    }\n\n    const {\n      amount\n    } = activeChallenge; // buscando a propriedade amount do desafio ativo o quanto de experiência ele oferece\n\n    let finalExperience = currentExperience + amount; // somando a experiência atual com a experiência adquirida\n\n    if (finalExperience >= experienceToNextLevel) {\n      // subir o usuario de nível e, se for o caso, considerar o saldo da experiência anterior \n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience); // atualizando a experiência do usuario\n\n    setActiveChallenge(null); // quando terminar o desafio é preciso zerá-lo\n\n    setChallengesCompleted(challengesCompleted + 1); // atualizando o numero de desafios completados\n  }\n\n  return (\n    /*#__PURE__*/\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        // propriedade value é o que será enviado de informação\n        level,\n        levelUp,\n        experienceToNextLevel,\n        currentExperience,\n        challengesCompleted,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n        startNewChallenge\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  );\n}","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB,C,CAAgD;;AAyBhD,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC,C,CAAsE;;AAE7E,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AAAE;AAE1E,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC,CAFwE,CAEjC;;AACvC,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D,CAHwE,CAGT;;AAC/D,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D,CAJwE,CAIL;;AACnE,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD,CALwE,CAKV;AAE9D;;AACA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B,CARwE,CAQZ;;AAG5D,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA6B;AAC3B;AACA,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B,CAF2B,CAEiD;;AAC5E,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B,CAH2B,CAGyB;;AAEpDN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AAAE;AAC1BX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CADwB,CACE;AAC3B;;AAED,WAASY,iBAAT,GAA6B;AAAE;AAC7B,QAAI,CAACb,eAAL,EAAsB;AACpB,aADoB,CACZ;AACT;;AAED,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB,CAL2B,CAKQ;;AACnC,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C,CAN2B,CAMsB;;AAEjD,QAAIC,eAAe,IAAIb,qBAAvB,EAA8C;AAAE;AAC9Ca,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACR;;AAEDR,IAAAA,oBAAoB,CAACkB,eAAD,CAApB,CAb2B,CAaY;;AACvCd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAd2B,CAcD;;AAC1BF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB,CAf2B,CAesB;AAClD;;AAGD;AAAA;AACE;AACA,YAAC,iBAAD,CAAmB,QAAnB;AACA,MAAA,KAAK,EAAE;AAAE;AACPJ,QAAAA,KADK;AAELW,QAAAA,OAFK;AAGLH,QAAAA,qBAHK;AAILN,QAAAA,iBAJK;AAKLE,QAAAA,mBALK;AAMLE,QAAAA,eANK;AAOLY,QAAAA,cAPK;AAQLC,QAAAA,iBARK;AASLP,QAAAA;AATK,OADP;AAAA,gBAYIb;AAZJ;AAAA;AAAA;AAAA;AAAA;AAFF;AAiBD","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\n\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\n\ninterface Challenge { // é recomendado detalhar quais propriedades o objeto possui\n  type: 'body' | 'eye'; // é uma string mas como temos apenas dois valores podemos declará-los\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  experienceToNextLevel: number;\n  currentExperience: number \n  challengesCompleted: number;\n  activeChallenge: Challenge;\n  resetChallenge: () => void; // função que não tem retorno\n  completeChallenge: () => void;\n  startNewChallenge: () => void;\n  levelUp: () => void;  \n}\n\ninterface ChallengesProviderProps { // o componente+Props recebe a propriedade children\n  children: ReactNode; // uma boa prática é fazer uma tipagem do children, onde o ReactNode aceita qualquer elemento filho\n}\n\n\nexport const ChallengesContext = createContext({} as ChallengesContextData); // declarando o tipo do contexto, já definido acima \n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) { // desestruturando as propriedades de children, que é todo o conteúdo de um componente\n  \n  const [level, setLevel] = useState(1); // o nível inicia em 1\n  const [currentExperience, setCurrentExperience] = useState(0); // a experiência do usuário inicia em 0\n  const [challengesCompleted, setChallengesCompleted] = useState(0); // desafios completados que inicia em 0\n  const [activeChallenge, setActiveChallenge] = useState(null); // criando um estado pra armazenar o challenge aleatório que inicia vazio\n\n  // calculando o quanto que usuário precisa de experiência pra avançar de level, baseado no level que está atualmente\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)  // cálculo de rpg baseado em raiz quadrada/potência - pow, na potência 2, de qual o próximo level vezes fator de experiência 4 (nível de dificuldade)\n\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um nº aleatório/randômico entre 0 e o número final que nesse caso é o tamanho total dos desafios; arrendondando pra baixo com o floor\n    const challenge = challenges[randomChallengeIndex]; // variável challenge com um index aleatório e específico\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() { // função chamada quando o usuário clicar no botão Falhei\n    setActiveChallenge(null); // voltando ao activeChallenge para o valor inicial\n  }\n\n  function completeChallenge() { // função que irá completar um desafio quando clicar no botão Completei; // não precisa de parâmetros pois já foram definidos no activeChallenge: qual o desafio, quanto de experência vale...\n    if (!activeChallenge) {\n      return; // return void, apenas para validação; essa função não pode ser chamada se usuario não estiver com desafio ativo\n    }\n\n    const { amount } = activeChallenge // buscando a propriedade amount do desafio ativo o quanto de experiência ele oferece\n    let finalExperience = currentExperience + amount // somando a experiência atual com a experiência adquirida\n\n    if (finalExperience >= experienceToNextLevel) { // subir o usuario de nível e, se for o caso, considerar o saldo da experiência anterior \n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    } \n\n    setCurrentExperience(finalExperience); // atualizando a experiência do usuario\n    setActiveChallenge(null); // quando terminar o desafio é preciso zerá-lo\n    setChallengesCompleted(challengesCompleted + 1); // atualizando o numero de desafios completados\n  }\n\n\n  return (\n    // dentro do Context há um componente Provider e todos os elementos dentro dele terão acesso aos dados daquele contexto\n    <ChallengesContext.Provider     \n    value={{ // propriedade value é o que será enviado de informação\n      level,\n      levelUp,\n      experienceToNextLevel,\n      currentExperience, \n      challengesCompleted,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge,\n      startNewChallenge,\n      }} >  \n      { children }\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}