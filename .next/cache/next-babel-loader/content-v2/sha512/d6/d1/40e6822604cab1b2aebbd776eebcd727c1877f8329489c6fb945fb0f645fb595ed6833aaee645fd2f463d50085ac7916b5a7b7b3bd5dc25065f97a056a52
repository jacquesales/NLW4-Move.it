{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Regras de neg√≥cio da aplica√ß√£o; Fun√ß√µes do challenge ser√£o acessadas por outros componentes da aplica√ß√£o:\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\n\nimport { LevelUpModal } from '../components/LevelUpModal/LevelUpModal';\nexport const ChallengesContext = /*#__PURE__*/createContext({}); // declarando o tipo do contexto, j√° definido acima \n\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    // desestruturando as propriedades de children, que √© todo o conte√∫do de um componente\n    children // todas as propriedades que n√£o s√£o a children est√£o armazenadas no rest operator \n\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1); // verifica o level, se n√£o existir inicia em 1\n\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // criando um estado pra armazenar o challenge aleat√≥rio que inicia vazio\n\n  const {\n    0: isLevelUpModalOpen,\n    1: SetIsLevelUpModalOpen\n  } = useState(false); // abrir o modal apenas quando o usu√°rio subir de n√≠vel\n  // calculando o quanto que usu√°rio precisa de experi√™ncia pra avan√ßar de level, baseado no level que est√° atualmente\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // c√°lculo de rpg baseado em raiz quadrada/pot√™ncia - pow, na pot√™ncia 2, de qual o pr√≥ximo level vezes fator de experi√™ncia 4 (n√≠vel de dificuldade)\n  // solicitando a permiss√£o do usu√°rio para enviar notifica√ß√µes de novos desafios\n\n  useEffect(() => {\n    // passando como 2¬∫ par√¢metro um array vazio; executa a arrow function uma √∫nica vez quando o componente for exibido em tela\n    Notification.requestPermission(); // API do pr√≥prio browser\n  }, []); // disparando a fun√ß√£o sempre que tiver mudan√ßa nas vari√°veis armazenadas nos cookies: n√≠vel, experi√™ncia ou desafio completado\n\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    SetIsLevelUpModalOpen(true);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um n¬∫ aleat√≥rio/rand√¥mico entre 0 e o n√∫mero final que nesse caso √© o tamanho total dos desafios; arrendondando pra baixo com o floor\n\n    const challenge = challenges[randomChallengeIndex]; // vari√°vel challenge com um index aleat√≥rio e espec√≠fico\n\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play(); // API do pr√≥prio browser\n\n    if (Notification.permission === 'granted') {\n      // se usu√°rio deu permiss√£o √†s notifica√ß√µes\n      new Notification('Novo desafio üèÜ', {\n        // uma notifica√ß√£o ser√° enviada a cada novo desafio\n        body: `Valendo ${challenge.amount}xp !`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    // fun√ß√£o chamada quando o usu√°rio clicar no bot√£o Falhei\n    setActiveChallenge(null); // voltando ao activeChallenge para o valor inicial\n  }\n\n  function completeChallenge() {\n    // fun√ß√£o que ir√° completar um desafio quando clicar no bot√£o Completei; // n√£o precisa de par√¢metros pois j√° foram definidos no activeChallenge: qual o desafio, quanto de exper√™ncia vale...\n    if (!activeChallenge) {\n      return; // return void, apenas para valida√ß√£o; essa fun√ß√£o n√£o pode ser chamada se usuario n√£o estiver com desafio ativo\n    }\n\n    const {\n      amount\n    } = activeChallenge; // buscando a propriedade amount do desafio ativo o quanto de experi√™ncia ele oferece\n\n    let finalExperience = currentExperience + amount; // somando a experi√™ncia atual com a experi√™ncia adquirida\n\n    if (finalExperience >= experienceToNextLevel) {\n      // subir o usuario de n√≠vel e, se for o caso, considerar o saldo da experi√™ncia anterior \n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience); // atualizando a experi√™ncia do usuario\n\n    setActiveChallenge(null); // quando terminar o desafio √© preciso zer√°-lo\n\n    setChallengesCompleted(challengesCompleted + 1); // atualizando o numero de desafios completados\n  }\n\n  function closeLevelUpModal() {\n    SetIsLevelUpModalOpen(false);\n  }\n\n  return (\n    /*#__PURE__*/\n    // dentro do Context h√° um componente Provider e todos os elementos dentro dele ter√£o acesso aos dados daquele contexto\n    _jsxDEV(ChallengesContext.Provider, {\n      value: {\n        // propriedade value √© o que ser√° enviado de informa√ß√£o\n        level,\n        levelUp,\n        experienceToNextLevel,\n        currentExperience,\n        challengesCompleted,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n        startNewChallenge,\n        closeLevelUpModal\n      },\n      children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this)\n  );\n}","map":{"version":3,"sources":["/home/jacqueline/Documents/NLW4/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","LevelUpModal","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","SetIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience","closeLevelUpModal"],"mappings":"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","sourcesContent":["// Regras de neg√≥cio da aplica√ß√£o; Fun√ß√µes do challenge ser√£o acessadas por outros componentes da aplica√ß√£o:\n\nimport { createContext, ReactNode, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\n\nimport challenges from '../../challenges.json'; // todos os desafios dentro de um array em formato JSON\nimport { LevelUpModal } from '../components/LevelUpModal/LevelUpModal';\n\ninterface Challenge { // √© recomendado detalhar quais propriedades o objeto possui\n  type: 'body' | 'eye'; // √© uma string mas como temos apenas dois valores podemos declar√°-los\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  experienceToNextLevel: number;\n  currentExperience: number \n  challengesCompleted: number;\n  activeChallenge: Challenge;\n  resetChallenge: () => void; // fun√ß√£o que n√£o tem retorno\n  completeChallenge: () => void;\n  startNewChallenge: () => void;\n  levelUp: () => void;\n  closeLevelUpModal: () => void;\n}\n\ninterface ChallengesProviderProps { // o componente+Props recebe a propriedade children\n  children: ReactNode; // uma boa pr√°tica √© fazer uma tipagem do children, onde o ReactNode aceita qualquer elemento filho\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n}\n\n\nexport const ChallengesContext = createContext({} as ChallengesContextData); // declarando o tipo do contexto, j√° definido acima \n\nexport function ChallengesProvider({ // desestruturando as propriedades de children, que √© todo o conte√∫do de um componente\n  children, \n  ...rest // todas as propriedades que n√£o s√£o a children est√£o armazenadas no rest operator \n}: ChallengesProviderProps) { \n  \n  const [level, setLevel] = useState(rest.level ?? 1); // verifica o level, se n√£o existir inicia em 1\n  const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0);\n  const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0);\n  const [activeChallenge, setActiveChallenge] = useState(null); // criando um estado pra armazenar o challenge aleat√≥rio que inicia vazio\n  const [isLevelUpModalOpen, SetIsLevelUpModalOpen] = useState(false); // abrir o modal apenas quando o usu√°rio subir de n√≠vel\n  \n  \n  // calculando o quanto que usu√°rio precisa de experi√™ncia pra avan√ßar de level, baseado no level que est√° atualmente\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)  // c√°lculo de rpg baseado em raiz quadrada/pot√™ncia - pow, na pot√™ncia 2, de qual o pr√≥ximo level vezes fator de experi√™ncia 4 (n√≠vel de dificuldade)\n\n  // solicitando a permiss√£o do usu√°rio para enviar notifica√ß√µes de novos desafios\n  useEffect(() => { // passando como 2¬∫ par√¢metro um array vazio; executa a arrow function uma √∫nica vez quando o componente for exibido em tela\n    Notification.requestPermission(); // API do pr√≥prio browser\n  }, []) \n\n  // disparando a fun√ß√£o sempre que tiver mudan√ßa nas vari√°veis armazenadas nos cookies: n√≠vel, experi√™ncia ou desafio completado\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]) \n\n  function levelUp() {\n    setLevel(level + 1);\n    SetIsLevelUpModalOpen(true);\n  }\n\n  function startNewChallenge() {\n    // capturando desafios:  \n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); // retornando um n¬∫ aleat√≥rio/rand√¥mico entre 0 e o n√∫mero final que nesse caso √© o tamanho total dos desafios; arrendondando pra baixo com o floor\n    const challenge = challenges[randomChallengeIndex]; // vari√°vel challenge com um index aleat√≥rio e espec√≠fico\n\n    setActiveChallenge(challenge);\n\n    new Audio('/notification.mp3').play(); // API do pr√≥prio browser\n\n    if (Notification.permission === 'granted') { // se usu√°rio deu permiss√£o √†s notifica√ß√µes\n      new Notification('Novo desafio üèÜ', { // uma notifica√ß√£o ser√° enviada a cada novo desafio\n        body: `Valendo ${challenge.amount}xp !`\n      }) \n    }\n  }\n\n  function resetChallenge() { // fun√ß√£o chamada quando o usu√°rio clicar no bot√£o Falhei\n    setActiveChallenge(null); // voltando ao activeChallenge para o valor inicial\n  }\n\n  function completeChallenge() { // fun√ß√£o que ir√° completar um desafio quando clicar no bot√£o Completei; // n√£o precisa de par√¢metros pois j√° foram definidos no activeChallenge: qual o desafio, quanto de exper√™ncia vale...\n    if (!activeChallenge) {\n      return; // return void, apenas para valida√ß√£o; essa fun√ß√£o n√£o pode ser chamada se usuario n√£o estiver com desafio ativo\n    }\n\n    const { amount } = activeChallenge // buscando a propriedade amount do desafio ativo o quanto de experi√™ncia ele oferece\n    let finalExperience = currentExperience + amount // somando a experi√™ncia atual com a experi√™ncia adquirida\n\n    if (finalExperience >= experienceToNextLevel) { // subir o usuario de n√≠vel e, se for o caso, considerar o saldo da experi√™ncia anterior \n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    } \n\n    setCurrentExperience(finalExperience); // atualizando a experi√™ncia do usuario\n    setActiveChallenge(null); // quando terminar o desafio √© preciso zer√°-lo\n    setChallengesCompleted(challengesCompleted + 1); // atualizando o numero de desafios completados\n  }\n\n  function closeLevelUpModal() {\n    SetIsLevelUpModalOpen(false);\n  }\n\n  return (\n    // dentro do Context h√° um componente Provider e todos os elementos dentro dele ter√£o acesso aos dados daquele contexto\n    <ChallengesContext.Provider     \n    value={{ // propriedade value √© o que ser√° enviado de informa√ß√£o\n      level,\n      levelUp,\n      experienceToNextLevel,\n      currentExperience, \n      challengesCompleted,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge,\n      startNewChallenge,\n      closeLevelUpModal,\n      }} >  \n      { children }\n\n      { isLevelUpModalOpen && <LevelUpModal /> }\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}